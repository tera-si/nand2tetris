// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Handles zx and zy flags
    Add16(a=false, b=false, out=allzeros);
    Mux16(a=x[0..15], b=allzeros, sel=zx, out=zxout);
    Mux16(a=y[0..15], b=allzeros, sel=zy, out=zyout);

    // Handles nx flag
    Not16(in=zxout, out=nzx);
    Mux16(a=zxout, b=nzx, sel=nx, out=nxout);

    // Handles ny flag
    Not16(in=zyout, out=nzy);
    Mux16(a=zyout, b=nzy, sel=ny, out=nyout);

    // Handles f flag
    And16(a=nxout, b=nyout, out=andout);
    Add16(a=nxout, b=nyout, out=addout);
    Mux16(a=andout, b=addout, sel=f, out=fout);

    // Handles no flag, regular output, and ng output
    // Then splits the regular output into two halves and pipe them to zr checks
    // Btw, multi-output ftw!
    Not16(in=fout, out=nf);
    Mux16(
        a=fout,
        b=nf,
        sel=no,
        out=out,                                // Regular output
        out[15]=ng,                             // If this bit is 1, that means
                                                // regular output is negative
        out[0..7]=aluout0, out[8..15]=aluout1   // Copy and split output to zr checks
    );

    // Handles zr
    Or8Way(in=aluout0, out=zrcheck0);            // Are any of the first 8 bits 1?
    Or8Way(in=aluout1, out=zrcheck1);            // Are any of the last 8 bits 1?
    Or(a=zrcheck0, b=zrcheck1, out=zrcheckfull); // Any of the two checks returned 1?
    Not(in=zrcheckfull, out=zr);                 // Invert because zr == 1 means
                                                 // regular output is all zeros.
}
