// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=notCin); // 1 if the instruction received was an A instruction
    // Output can be ALU result or instruction input from ROM
    Mux16(a=aluOut, b=instruction, sel=notCin, out=aluOrIn);

    // Check if the instruction received was an A instruction, or that the C
    // instruction destination is set as the A register.
    // Have to check for the appropriate instruction type when writing to
    // registers because you don't want to incorrectly overwrite saved values!
    Or(a=notCin, b=instruction[5], out=writeA);
    ARegister(in=aluOrIn, load=writeA, out=aRegOut, out[0..14]=addressM); // A register

    // instruction[12] dictates whether the ALU should process the A or M value
    // If the CPU writeM is not enabled, the ALU output is ignored anyway, so we
    // don't need to check for A or C instruction here
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aOrM);

    ALU(
        x=dRegOut,
        y=aOrM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut,
        out=outM,
        zr=isZero,
        ng=isNegative
    );

    // Check for C instruction and that the destination is D register
    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=aluOut, load=writeD, out=dRegOut); // D register

    // Check for C instruction and that the destination is M
    And(a=instruction[15], b=instruction[3], out=writeM);

    And(a=instruction[0], b=instruction[1], out=jmp01);
    And(a=instruction[1], b=instruction[2], out=jmp12);
    And(a=instruction[0], b=instruction[2], out=jmp02);
    And(a=instruction[2], b=jmp01, out=jmp012);
    Not(in=isZero, out=notZero);
    Not(in=isNegative, out=notNegative);
    And(a=notZero, b=notNegative, out=isPositive);

                                                  // ALU output is...
    And(a=instruction[0], b=isPositive, out=jgt); // positive
    And(a=instruction[1], b=isZero, out=jeq);     // zero
    And(a=jmp01, b=notNegative, out=jge);         // not negative
    And(a=instruction[2], b=isNegative, out=jlt); // negative
    And(a=jmp02, b=notZero, out=jne);             // not zero
    And(a=jmp12, b=isNegative, out=jle);          // negative

    // Are any of the jump conditions met?
    Or8Way(
        in[0]=false, // unused
        in[1]=jgt,
        in[2]=jeq,
        in[3]=jge,
        in[4]=jlt,
        in[5]=jne,
        in[6]=jle,
        in[7]=jmp012, // check if all three jump bits are 1
        out=jump
    );
    And(a=jump, b=instruction[15], out=writeLoad); // jump only if C instruction
    Not(in=writeLoad, out=inc); // load and inc equals the flip of each other

    PC(in=aRegOut, load=writeLoad, inc=inc, reset=reset, out[0..14]=pc);
}
